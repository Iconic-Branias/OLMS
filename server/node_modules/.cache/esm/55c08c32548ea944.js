let express,ApolloServer,cors,PORT,bodyParser,typeDefs,resolvers,AppModels,connect_DB;_548‍.w("express",[["default",["express"],function(v){express=v}]]);_548‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_548‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_548‍.w("./config",[["PORT",["PORT"],function(v){PORT=v}]]);_548‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_548‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_548‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_548‍.w("./models",[["*",null,function(v){AppModels=v}]]);_548‍.w("./db",[["connect_DB",["connect_DB"],function(v){connect_DB=v}]]);








const port = PORT;
const app = express();
app.use(bodyParser.json({limit:"50mb"}));

const startApp = () =>{
    connect_DB()
    const server = new ApolloServer({
        typeDefs,
        resolvers,
        context:({req})=>{
            let {isAuth,user} = req;
            return{
                req,
                user,
                isAuth,
                ...AppModels
            }
        }
    })
    server.applyMiddleware({app})
    app.listen(port,()=>{
        console.log(`Server is running at port ${port}`);
    })
}
startApp();